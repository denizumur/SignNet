# -*- coding: utf-8 -*-
"""SignNet .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fDPO8MnBHQdJHwSfWMzomusTsGnKa_11
"""

!pip install -q kaggle
# TensorFlow ve gerekli paketleri yükle
!pip install -q tensorflow==2.18 opencv-python-headless matplotlib scikit-learn
import tensorflow as tf
!sudo pip3 install keras
print(tf.__version__)

from google.colab import files
files.upload()

# Kaggle API ve veri setiniindirip klasörleme
import os
os.makedirs('/root/.kaggle', exist_ok=True)
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d meowmeowmeowmeowmeow/gtsrb-german-traffic-sign
!unzip -q gtsrb-german-traffic-sign.zip

import numpy as np
import os
import cv2
import tensorflow as tf
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split

data = []
labels = []
classes = 43
IMG_SIZE = 30

for i in range(classes):
    path = f"/content/Train/{i}/"
    for img in os.listdir(path):
        try:
            image = cv2.imread(os.path.join(path, img))
            # Görüntü 30x30 boyutuna getiriliyor
            image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))
            data.append(image)
            labels.append(i)
        except:
            print("Görüntü okunamadı:", img)

data = np.array(data) / 255.0
labels = to_categorical(np.array(labels), classes)
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# CNN modelinin oluşturulması

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

input_shape = (IMG_SIZE, IMG_SIZE, 3)

model = Sequential([
    Conv2D(32, (5, 5), activation='relu', input_shape=input_shape),
    Conv2D(32, (5, 5), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),

    Conv2D(64, (3, 3), activation='relu'),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.25),

    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(classes, activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

# Model eğitimi
history = model.fit(X_train, y_train, batch_size=64, epochs=15, validation_data=(X_test, y_test))

model.save("traffic_sign_model.h5")

# Accuracy ve Loss grafiklerinin gösterimi
import matplotlib.pyplot as plt
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Eğitim')
plt.plot(history.history['val_accuracy'], label='Doğrulama')
plt.title('Model Doğruluğu')
plt.xlabel('Epoch')
plt.ylabel('Doğruluk')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Eğitim')
plt.plot(history.history['val_loss'], label='Doğrulama')
plt.title('Model Kayıp')
plt.xlabel('Epoch')
plt.ylabel('Kayıp')
plt.legend()

plt.tight_layout()
plt.show()

from tensorflow.keras.models import load_model

model = load_model("traffic_sign_model.h5")
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
classes_dict = {i: f"Sınıf {i}" for i in range(43)}

def predict_image(img_path):

    image = cv2.imread(img_path)
    if image is None:
        raise ValueError(f"Görüntü okunamadı: {img_path}")
    image = cv2.resize(image, (IMG_SIZE, IMG_SIZE))
    image = np.expand_dims(image, axis=0) / 255.0

    # Tahmin
    predictions = model.predict(image)
    predicted_class = np.argmax(predictions)
    probability = float(np.max(predictions))


    label = classes_dict.get(predicted_class, "Bilinmeyen")
    return label, probability

# görüntü dosyasını girdi olarak alır
# ilgili sınıf etiketini (label) ve olasılık değerini geri döner.
label, prob = predict_image('/content/meta/10.png')
print(f"Tahmin: {label} ({prob*100:.2f}%)")

