# -*- coding: utf-8 -*-
"""signnet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18bopQNwfA31ZFi9dBafRVL9W0jaUbELZ
"""

import os
os.makedirs('/content/traffic_data', exist_ok=True)
os.makedirs('/content/models', exist_ok=True)
os.makedirs('/content/results', exist_ok=True)
print("Klasörler başarıyla oluşturuldu.")

!pip install -q kaggle
!pip install -q tensorflow==2.18 opencv-python-headless matplotlib scikit-learn
import tensorflow as tf
!sudo pip3 install keras
print(tf.__version__)

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Veri setini indir ve çıkart
!kaggle datasets download -d meowmeowmeowmeowmeow/gtsrb-german-traffic-sign
!unzip -q gtsrb-german-traffic-sign.zip -d /content/traffic_data

# Klasör kontrolü
import os
print(os.listdir('/content/traffic_data'))

classes = {
    0: 'Speed limit (20km/h)', 1: 'Speed limit (30km/h)', 2: 'Speed limit (50km/h)',
    3: 'Speed limit (60km/h)', 4: 'Speed limit (70km/h)', 5: 'Speed limit (80km/h)',
    6: 'End of speed limit (80km/h)', 7: 'Speed limit (100km/h)', 8: 'Speed limit (120km/h)',
    9: 'No passing', 10: 'No passing veh over 3.5 tons', 11: 'Right-of-way at intersection',
    12: 'Priority road', 13: 'Yield', 14: 'Stop', 15: 'No vehicles', 16: 'Veh > 3.5 tons prohibited',
    17: 'No entry', 18: 'General caution', 19: 'Dangerous curve left', 20: 'Dangerous curve right',
    21: 'Double curve', 22: 'Bumpy road', 23: 'Slippery road', 24: 'Road narrows on the right',
    25: 'Road work', 26: 'Traffic signals', 27: 'Pedestrians', 28: 'Children crossing',
    29: 'Bicycles crossing', 30: 'Beware of ice/snow', 31: 'Wild animals crossing',
    32: 'End speed + passing limits', 33: 'Turn right ahead', 34: 'Turn left ahead',
    35: 'Ahead only', 36: 'Go straight or right', 37: 'Go straight or left', 38: 'Keep right',
    39: 'Keep left', 40: 'Roundabout mandatory', 41: 'End of no passing', 42: 'End no passing veh > 3.5 tons'
}

import pandas as pd
from tensorflow.keras.preprocessing.image import ImageDataGenerator

batch_size = 32
seed = 42
height = 50
width = 50
data_dir = "/content/traffic_data"


train_df = pd.read_csv('/content/traffic_data/Train.csv')
train_df['ClassId'] = train_df['ClassId'].astype(str)

# Veri artırma işlemi
train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Eğitim ve doğrulama setleri
train_generator = train_datagen.flow_from_dataframe(
    dataframe=train_df,
    directory=data_dir,
    x_col='Path',
    y_col='ClassId',
    target_size=(height, width),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True,
    subset='training',
    seed=seed
)

validation_generator = train_datagen.flow_from_dataframe(
    dataframe=train_df,
    directory=data_dir,
    x_col='Path',
    y_col='ClassId',
    target_size=(height, width),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True,
    subset='validation',
    seed=seed
)

from tensorflow import keras

model = keras.models.Sequential([
    keras.layers.Conv2D(16, (5,5), activation='relu', input_shape=(height, width, 3)),
    keras.layers.Conv2D(32, (5,5), activation='relu'),
    keras.layers.MaxPool2D((2, 2)),
    keras.layers.BatchNormalization(),

    keras.layers.Conv2D(64, (3,3), activation='relu'),
    keras.layers.Conv2D(64, (3,3), activation='relu'),
    keras.layers.MaxPool2D((2, 2)),
    keras.layers.BatchNormalization(),
    keras.layers.Dropout(0.25),

    keras.layers.Flatten(),
    keras.layers.Dense(512, activation='relu'),
    keras.layers.BatchNormalization(),
    keras.layers.Dropout(0.25),

    keras.layers.Dense(43, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=15
)

model.save('/content/models/traffic_sign_model.keras')
print("Model başarıyla `.keras` formatında kaydedildi.")

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 5))


plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Eğitim Doğruluğu')
plt.plot(history.history['val_accuracy'], label='Doğrulama Doğruluğu')
plt.title('Model Doğruluğu (Accuracy)')
plt.xlabel('Epoch')
plt.ylabel('Doğruluk')
plt.legend()


plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Eğitim Kaybı')
plt.plot(history.history['val_loss'], label='Doğrulama Kaybı')
plt.title('Model Kayıp (Loss)')
plt.xlabel('Epoch')
plt.ylabel('Kayıp')
plt.legend()

plt.tight_layout()
plt.show()

from tensorflow.keras.models import load_model


model = load_model('/content/models/traffic_sign_model.keras')
print("Model başarıyla yüklendi.")

import cv2
import numpy as np

def predict_image(img_path):




        #(label, probability) - Sınıf etiketi ve olasılık değeri dönecek


    image = cv2.imread(img_path)

    if image is None:
        print("Görüntü okunamadı veya dosya bulunamadı.")
        return None, None


    image = cv2.resize(image, (50, 50))
    image = np.expand_dims(image, axis=0) / 255.0

    # pred(tahmin)
    predictions = model.predict(image)
    class_id = np.argmax(predictions)
    probability = np.max(predictions)


    print(f"Tahmin: {classes[class_id]} - Olasılık: {probability*100:.2f}%")

    return classes[class_id], probability

# tahmin örnekler
predict_image('/content/traffic_data/Meta/10.png')

